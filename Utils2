public void clickLinkByText(String linkText) {
    try {
        By dynamicLink = By.xpath("//a[normalize-space(text())='" + linkText + "']");
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        WebElement link = wait.until(ExpectedConditions.elementToBeClickable(dynamicLink));
        link.click();
        System.out.println("Clicked on link: " + linkText);
    } catch (TimeoutException e) {
        throw new RuntimeException("Link with text '" + linkText + "' was not clickable in time", e);
    } catch (Exception e) {
        throw new RuntimeException("Failed to click link with text: " + linkText, e);
    }
}

public void switchToNewTabAndMaximize() {
    try {
        Set<String> allWindows = driver.getWindowHandles();
        String currentWindow = driver.getWindowHandle();

        for (String window : allWindows) {
            if (!window.equals(currentWindow)) {
                driver.switchTo().window(window);
                driver.manage().window().maximize();
                System.out.println("Switched to new tab and maximized.");
                return;
            }
        }

        throw new RuntimeException("No new tab found to switch.");
    } catch (Exception e) {
        throw new RuntimeException("Failed to switch to new tab and maximize window", e);
    }
}

public void validatePartialTextInElement(WebElement element, String expectedPartialText) {
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    wait.until(ExpectedConditions.visibilityOf(element));

    String actualText = element.getText();
    assertTrue(actualText.contains(expectedPartialText),
        "Expected text to contain: '" + expectedPartialText + "', but found: '" + actualText + "'");
}

public void switchToWindowWithPartialTitle(String partialTitle) {
    Set<String> windowHandles = driver.getWindowHandles();

    for (String handle : windowHandles) {
        driver.switchTo().window(handle);
        String currentTitle = driver.getTitle();
        if (currentTitle.contains(partialTitle)) {
            System.out.println("Switched to window with title: " + currentTitle);
            return;
        }
    }

    throw new RuntimeException("No window found with title containing: " + partialTitle);
}


public void switchToWindowWithPartialTitle(String partialTitle, int timeoutSeconds) {
    int elapsed = 0;
    int pollInterval = 500; // in ms

    while (elapsed < timeoutSeconds * 1000) {
        Set<String> windowHandles = driver.getWindowHandles();

        for (String handle : windowHandles) {
            driver.switchTo().window(handle);
            String currentTitle = driver.getTitle();

            if (currentTitle != null && currentTitle.contains(partialTitle)) {
                System.out.println("Switched to window with title: " + currentTitle);
                return;
            }
        }

        try {
            Thread.sleep(pollInterval);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Thread was interrupted while waiting for window with title: " + partialTitle);
        }

        elapsed += pollInterval;
    }

    throw new RuntimeException("Timeout: No window found with title containing: " + partialTitle);
}
